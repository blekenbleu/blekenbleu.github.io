<html>
<head>
<style>
h1, h2, h3, h4, h5 {
  margin-bottom:0.5px;
}
</style>
<title>SimHub plugin How-To and Discord discussions</title>
</head>
<body>
<h2>SimHub plugin How-To and Discord discussions</h2>
<pre>Wotever 12/28/2017
To share a plugin, you must first rename it in project settings,
and also rename the plugin class
after which you will just have to give the plugin dll
and enable it into the settings.
Plugins are the ultimate extensibility point :D, everything in simhub is based on it.
PluginDemo.cs
https://discord.com/channels/299259397060689920/306850703299575809/396037829886738432

7.4.17b1 - SDK now demonstrate how to use AttachDelegate instead of AddProperty/SetPropertyValue

Wotever 10/16/2021 8:47 AM
Attach property is a third property declaration way :D, there are three ways :
- SetPropertyValue : The simplest but the slowest, set the value at each update loop
- Attachproperty : it allows to add a "wrapper" for a property,
  which can be set at each game loop (it was an convoluted variation of the previous one,
  skipping SetPropertyValue costs, but keeping the disavantages of requiring computations for each loop.
  I keep this one in use internally for stuffs I need to compute for each loop anyway
  (about 40 properties in grand total I would say)
- AttachDelegate : zero costs if it's not in use

Attachproperty looks like:
public AttachedProperty<int> RGBIntensity = new AttachedProperty<int>();
public void Init(PluginManager pluginManager)
{
    RGBIntensity.Value = initialvalue;
    pluginManager.AttachProperty("RGBIntensity", typeof(SerialDashPlugin), properties.RGBIntensity);
}

void anotherfunc(){
      // This update has no particular CPU costs except computing "newvalue"
       RGBIntensity.Value = newvalue;
}

AttachProperty requires computing a result at each loop;
AttachDelegate is 100% on demand:
// Declare a property available in the property list,
// this gets evaluated "on demand" (when shown or used in formulas)
// '=>' is C# syntax for lambda experssion, in this case without input parameters
// https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-operator
this.AttachDelegate("CurrentDateTime", () => DateTime.Now);

Andreas Dahl 02/22/2022 9:58 AM
AddProperty() in the Init scope, and do all data collection, computation and SetPropertyValue() in the DataUpdate scope

GarySwallow 09/16/2019 3:38 PM
Advanced Custom Plugin Demo</pre>
Open the <a href="https://cdn.discordapp.com/attachments/306850703299575809/623241262493073410/AdvancedCustom.PluginSdkDemo.zip"><code>AdvancedCustomUser.PluginSdkDemo.sln</code> project file</a>.<br>
<br>
<a name=HowTo><h3>SimHub SDK How-To</h3></a>
Plugins can interact via Properties, Actions and Events, where Events (e.g. button presses) may launch Actions.<br>
Properties can contain numeric or string variables.<br>
Instead of requiring code to check for changing values e.g. 60 times per second,<br>
one could presumably provoke an Event to launch code in an Action to evaluate or change Properties.<br>
Packaged as <code>.dll</code> files, SimHub plugins are installed by dragging into<br>
the SimHub folder containing SimHubWPF.exe and numerous other <code>.dll</code> files.<br>
SimHub presumably identifies plugins from other <code>.dll</code> files by including this line in their source:<br>
&nbsp <code>using SimHub.Plugins;</code><br>
<br>

SimHub and its plugin SDK are written in C#.<br>
My struggles with C# and Visual Studion are addressed in <a href="VisualStudio.htm"><b>this C# Visual Studio How-To</b></a>.<br>
 &nbsp &nbsp <b>-</b> SimHub wants .NET framework 4.8, per Wotever 8.2.0 release 12/16/2022<br>
<br>
<h4>First tip: start with a working example plugin</h4>
Conventions for plugin C# may differ appreciably from generic .NET C# apps:
<li>Not an App;&nbsp a DLL launched by SimHub
<li>Best created in a <code>SimHub/PluginSdk/</code> folder;&nbsp relative path to SimHub classes and <code>.dll</code> build destination
<li>Sadly, Visual Studio 2019 rejects <i>relative</i> path to <code>SimHubWPF.exe</code> for Debug <code>&lt;StartProgram&gt;</code>;&nbsp path must be absolute.
<li>Obvious starting place:&nbsp <code>SimHub/PluginSdk/User.PluginSdkDemo/</code>
<li>Also simple, already a GitHub project:&nbsp
 <a href="https://github.com/viper4gh/SimHub-Plugin-CalcLngWheelSlip"><code>SimHub/PluginSdk/CalcLngWheelSlip</code></a><br>
<br>

Properties are listed inside <b>Available Properties</b>.<br> &nbsp
<img width=640 src="https://media.discordapp.net/attachments/306850703299575809/1038925004865273927/image.png"><br clear=all>
<dl>
<dt><br>SimHub plugins can add more <i>properties</i>, which can be read in other plugins e.g. ShakeIt.<br>
<dd>Similarly, plugins can read properties that are e.g. set in the ShakeIt plugin.<br>
e.g. (<a href="https://github.com/andreasdahl1987/DahlDesignProperties">Dahl Design Properties</a>
<a href="https://dahl-design.gitbook.io/properties/introduction/install#additional-setup">reads and sets properties</a> in
<a href="https://github.com/andreasdahl1987/DahlDesignProperties/blob/6c61e69e93ac3ddd97e9ba49972797ab8ddc66d2/iRacing/iRacing.cs#L1220">iRacing.cs</a>).
<pre>
...
namespace DahlDesign.Plugin.iRacing
{
  public class Data : SectionBase
  {
    public override void Init(PluginManager pluginManager)
    {
...
      InitializeLists();

      #region SimHub Properties
...
      Base.AddProp("SlipLF", 0);
      Base.AddProp("SlipRF", 0);
      Base.AddProp("SlipLR", 0);
      Base.AddProp("SlipRR", 0);
...
      #endregion
    }

    public override void DataUpdate(PluginManager pluginManager, ref GameData data)
    {
...
      double slipLF = Convert.ToDouble(pluginManager.GetPropertyValue("ShakeITMotorsV3Plugin.Export.WheelSlip.FrontLeft"));  //Wheel slip
      double slipRF = Convert.ToDouble(pluginManager.GetPropertyValue("ShakeITMotorsV3Plugin.Export.WheelSlip.FrontRight"));  //Wheel slip
      double slipLR = Convert.ToDouble(pluginManager.GetPropertyValue("ShakeITMotorsV3Plugin.Export.WheelSlip.RearLeft"));  //Wheel slip
      double slipRR = Convert.ToDouble(pluginManager.GetPropertyValue("ShakeITMotorsV3Plugin.Export.WheelSlip.RearRight"));  //Wheel slip
...

      Base.SetProp("SlipLF", slipLF);
      Base.SetProp("SlipRF", slipRF);
      Base.SetProp("SlipLR", slipLR);
      Base.SetProp("SlipRR", slipRR);
    }
  }
}
</pre>
By appropriately gluing something like this to MIDI code,<br>
MIDI sliders can be used to set SimHub property values,<br>
while SimHub property values can be used to set MIDI values for e.g. VST level trimmers

<dt><br><b>Second tip:&nbsp Initializing properties</b>
<br>Global properties are easily created using <a href="https://github.com/SHWotever/SimHub/wiki/NCalc-scripting"><b>NCalc</b></a>;
<dd>
<i><b>Hating</b></i> user interface code, I configure my plugins by editing a matching NCalc script.<br>
NCalc examples are available in <code>\SimHub\NCalcScripts\examples.ini</code>;<br>
edit a copy of <a href="https://github.com/blekenbleu/blekenbleu.MIDIio/blob/main/MIDIio.ini"><code>MIDIio.ini</code></a> in that folder.<br>

<dt><br>Plugins can also access <a href="./#CCEx">Custom Expression</a> properties during Init {}.
<dd>SimHub evaluates those custom expressions before [re]launching plugins e.g. after game changes.

<dt><br><b>Third tip:&nbsp Editing source while debugging</b>
<dd>Visual Studio will throw up all sorts of confusing warnings and error messages<br>
which are <i>not actual problems</i>, other than source changes' impacts on that current debugging session.<br>
Regardless, I find it easier to make some plugin source code changes while SimHub runs.<br>
Running SimHub standalone, rather than launched via Visual Studio <code>Debug</code> avoids that.

<dt><br><b>Tip #4:&nbsp <code>grep</code> is your friend</b>
<dd>Searching for the Visual Studio way to e.g. convert code from WPF to console mostly yields recommendations to <i>start over</i>.<br>
Instead, grepping for names used in WPF content will show where/how they are referenced e.g. in the <code>.csproj</code> file.<br>
Rather than sort where in the Visual Studio user interface such stuff is controlled,<br>
I mostly directly edit project files using my editor of choice <i>while Visual Studio is not running</i>.

<dt><br><b>Tip #5:&nbsp remove unused stuff</b>
<dd>Visual Studio noted that <code>using System.Windows.Media;</code> was no longer used and prompted its removal<br>
Visual Studio can also remove unused Solution Explorer <code>Dependencies > Assemblies</code> entries,
 but only in <a href="VisualStudio.htm#SDK"><b>SDK projects</b></a>,<br>
which SimHub plugins by default are not.

<dt><br><b>Tip #6:&nbsp debug strings as properties</b>
<dd>writing to SimHub's log works, but messages can be missed in the deluge.<br>
Instead, repurpose a delegate property, e.g. <code>string PluginMsg;</code>:<pre>
PluginMsg = $"CustomSerial.Write({Traffic[1]})";
CustomSerial.Write(Traffic[1]);
PluginMsg += " sent";</pre>
If "sent" is not seen in the PluginMsg property, then the plugin hung or failed in <code>CustomSerial.Write(Traffic[1]);</code>

<dt><br>C# plugin source and discussions
<dd>Here is <a href="PluginDemo.cs">an older and smaller PluginDemo.cs</a>.<br>
It appears to include a trick for Initializing a list of properties that differ only by a number.
</dl>
<hr>
<a name=ChatGPT><h3>OpenAI ChatGPT code for SImHub plugin using DryWetMIDI</h3></a>
<pre>
// Here is an example of how you might use the DryWetMIDI library
// in a SimHub plugin to send MIDI messages:

using SimHub;
using DryWetMIDI.Devices;
using DryWetMIDI.Interaction;

namespace MySimHubPlugin
{
    public class MySimHubPlugin : Plugin
    {
        private OutputDevice _midiOut;

        public override void Start()
        {
            // Connect to the first available MIDI output device
            _midiOut = OutputDevice.GetByName("My MIDI Device");
        }

        public override void Update()
        {
            // Send a MIDI message to turn on a note
            _midiOut.Send(new NoteOn(Channel.Channel1, 60, 100));
        }
    }
}
/* This plugin connects to the first MIDI output device that is available
 ; and sends a MIDI "note on" message to it on each frame.
 ; The message will turn on a note with a pitch of 60 (middle C)
 ; and a velocity of 100 on channel 1.
 */
</pre>
<hr>
<h5>15 Jan 2023 plugin experiment</h5>
<pre>
- rename User.PluginSdkDemo to blekenbleu.PluginSdkDemo
- update SimHub from 7.4.23 to 8.2.0, which restored/updated
  > User.PluginSdkDemo
  > User.LedEditorEffect
- User.PluginSdkDemo files:
   DataPluginDemo.cs, DataPluginDemoSettings.cs unchanged
   in User.PluginSdkDemo.csproj
        <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>            became <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>
- as with v 7.4.23, all replays work, except AC

 StreamDeck SimHub Plugin
https://www.reddit.com/r/simracing/comments/ru20od/streamdeck_simhub_plugin/

Visual Studio project folder rename
https://medium.com/c-sharp-progarmming/safely-rename-a-project-folder-visual-studio-f3c6bd4d0bd6

Rename a code symbol refactoring
https://learn.microsoft.com/en-us/visualstudio/ide/reference/rename?view=vs-2019
https://learn.microsoft.com/en-us/visualstudio/ide/class-designer/refactoring-classes-and-types?view=vs-2019
https://blog.ndepend.com/top-10-visual-studio-refactoring-tips/
</pre>
<h5>17 Jan push to GitHub; Debug output:</h5>
<code>Resource not found; ResourceKey='MahApps.Metro.Styles.FlatButtonFocusVisualStyle'</code><br>
<a href="https://stackoverflow.com/questions/63188212/wpf-mahapps-metro-resources-not-found">
change 'Styles/Accents/' to 'Styles/Themes/' in <code>Properties/DesignTimeResources.xaml</code></a><br>
<b>This actually seems to have worked.</b><br>
<br>
"It could be that you don't have an App,<br>&nbsp
 if so then you must add the resources to every Window of your extension.<br>&nbsp
 Another trick is to use the DynamicResource instead StaticResource,<br>&nbsp
  because the resources will maybe are loaded later"<br>&nbsp
<a href="https://github.com/MahApps/MahApps.Metro/issues/4046">
https://github.com/MahApps/MahApps.Metro/issues/4046</a>

<h5>20-21 Jan: eliminating unused resources</h5>
<a href="VisualStudio.htm#SDK">SDK project conversion</a> enabled removing unused library references,<br>
but the conversion tool failed to convert &lt;OutputPath&gt to &lt;OutDir&gt in <code>.csproj</code> file,<br>
and VS user interface no longer offers changing Debug program in <b>Properties</b>,<br>
although setting in <code>.csproj</code> file is still honored.

<h5>22 Jan: renaming MIDIioSettings class to MIDIdrywet</h5>
Using VS to rename then <code>MIDIioSettings</code> class also provoked it to rename the containing <code>MIDIioSettings.cs</code> to <code>MIDIdrywet.cs</code>.<br>
However, <code>MIDIioSettings.cs</code> was under git version control, but VS did not execute a git renaming.<br>
Perhaps because I had not previously fiddled with VS Git settings...?<br>
Consequently, <code>git mv</code> was done manually from a shell.<br>
After selecting the local repository from its drop-down, committing the class change from within VS was recognized by GitHub Desktop.<br>
<br>
<b>Hacked <a href="https://github.com/blekenbleu/blekenbleu.MIDIio/blob/main/MIDIdrywet.cs">the MIDI equivalent of "Hello World"</a></b> from
<a href="https://www.codeproject.com/Articles/melanchall#Article">Melanchall</a>'s
example C# source for <a href="https://melanchall.github.io/drywetmidi/articles/devices/Input-device.html">Input</a>
and (eventually) <a href="https://melanchall.github.io/drywetmidi/articles/devices/Output-device.html">Output</a> devices.<br>
Then, glued this <code>MIDIdrywet</code> class into <code>MIDIio.cs</code>...<br>
Added an exception handler for no MIDI input device matching the provided name.<br>
List device names as known to <code>Melanchall.DryWetMidi.Devices</code>...<pre>
	INFO	Event received from 'nanoKONTROL2': Control Change [0] (16, 72)
	INFO	ControlNumber = '16'; ControlValue = '72
	INFO	Event received from 'nanoKONTROL2': Control Change [0] (16, 73)
	INFO	ControlNumber = '16'; ControlValue = '73
	INFO	Event received from 'nanoKONTROL2': Control Change [0] (16, 74)
	INFO	ControlNumber = '16'; ControlValue = '74
	INFO	Event received from 'nanoKONTROL2': Control Change [0] (16, 75)
	INFO	ControlNumber = '16'; ControlValue = '75
</pre>
Need to save and restore Sliders and Knobs in Settings.

<h5>23 Jan: Sliders and Knobs saved/restored in Settings</h5>
Sadly, SimHub crashes if/when MIDIio and SimHub Midi Controller plugins are both enabled.<br>
Pretending to be surprised, but adding MIDI key events and properties to MIDio is probably easier than coexistence,<br>
which might require reentrance changes in <code>Melanchall.DryWetMidi</code> and sharing a MIDI device.<br>
<br>
Finding available Events was unobvious to me.
<li>Clicking <b>New mapping</b> from <b>Controls</b> wants only immediate inputs, which may be unobvious to generate.
<li>Clicking <b>New mapping</b> from <b>Events</b> shows available predefined events and actions;<br>
 &nbsp &nbsp &nbsp automagically creating events for non-slider ControlChanges may be easier...<br>
<li>Events can probably only be launched from MIDIio class, unless <code>this</code> gets passed...

<h5>24 Jan: Active button Control Change (CC) Settings bitmap for properties and events saved/restored</h5> 
Plugin properties seemingly <i>must</i> be set without indexing variables.<br>

<h5>24 Jan: <a href="https://melanchall.github.io/drywetmidi/articles/devices/Output-device.html">DryWetMIDI output MIDI device</a></h5>
Basically the same tactic as reading:&nbsp <code>try</code> opening the property name, then <code>catch</code> exception by logging known devices.<br>
<b><i>Trick</i></b>:&nbsp to avoid upsetting VS, copy e.g. <code>MIDIdrywet.cs</code> to a <code>.txt</code> file, edit to change class name, etc. then rename.<br>
<li><code>OUTdrywet.cs</code> was created this way...

<h5>11 Mar 2023: <a href="https://github.com/blekenbleu/Fake8">Serial Ports</a></h5>
Any number of issues, largely thanks to:<ul compact>
<li>terrible examples;&nbsp <a href="https://learn.microsoft.com/en-us/dotnet/api/system.io.ports.serialport">best of a poor lot</a>:<pre>
public class PortChat
{
    static bool _continue;
    static SerialPort _serialPort;
</pre>
Note: use of <code>static</code> for both <code>SerialPort</code> and <code>bool</code>:<br>
- <code>SerialPort</code> will use a delegate
- delegate works with <code>static</code>
<pre>
public static void Read()
{
    while (_continue)
    {
        try
        {
            string message = _serialPort.ReadLine();
            Console.WriteLine(message);
        }
        catch (TimeoutException) { }
    }
}</pre>
... where <code>Read()</code> runs in another thread, and could not access <code>_continue</code> if not <code>static</code>.<br>
This example launches <code>Read()</code> by <code>Thread readThread = new Thread(Read);</code><br>
... but can instead by launched by <a href="https://learn.microsoft.com/en-us/dotnet/api/system.io.ports.serialdatareceivedeventhandler">SerialDataReceivedEventHandler Delegate</a>:
<pre>
    public delegate void SerialDataReceivedEventHandler(object sender, SerialDataReceivedEventArgs e);

    mySerialPort.DataReceived += new SerialDataReceivedEventHandler(DataReceivedHandler);
    mySerialPort.Open();
}

private static void DataReceivedHandler(
                        object sender,
                        SerialDataReceivedEventArgs e)
{
    SerialPort sp = (SerialPort)sender;
    string indata = sp.ReadExisting();
    Console.WriteLine("Data Received:");
    Console.Write(indata);
}
</pre>
Notes:<ul compact>
<li>that <i>lame</i> <code>DataReceivedHandler()</code> example does nothing interesting with received data,<br>
e.g. returning it to the writing thread for processing.
<li>It requires a new thread for each receive event.&nbsp Instead, it <i>could</i>:<pre>
private static void DataReceivedHandler(object sender, SerialDataReceivedEventArgs e) 
{
    SerialPort sp = (SerialPort)sender;
    while(_continue)                         // set false before PortChat instance thread exits
        PCrcv(PC(), sp.ReadExisting());      // pass current instance to main thread static method() delegate
}

private delegate void PChatDel(PortChat Instance, string text);
readonly PChatDel PCrcv = PortChatreceiver; 

private PortChat PC() { return this; }      // callback for current PortChat class instance
</pre>
<code>PortChatreceiver()</code> fails for asynchronous threads, unless e.g.
<a href="https://www.albahari.com/threading/part5.aspx#_Concurrent_Collections">queues are implemented</a>,<br>
but for plugin applications, SimHub coordinates property value updates among plugins,<br>
and serial messages received can always be only in response to messages sent, with fixed known unique terminating bytes.
</ul>
</body>
</html>
