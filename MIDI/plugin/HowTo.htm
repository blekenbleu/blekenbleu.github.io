<html>
<head>
<title>SimHub plugin How-To and Discord discussions</title>
</head>
<body>
<pre>Wotever 12/28/2017
To share a plugin, you must first rename it into the project settings,
and also rename the plugin class name
after you will just have to give the plugin dll
and enable it into the settings.
Plugins are the ultimate extensibility point :D, everything in simhub is based on it.
PluginDemo.cs
https://discord.com/channels/299259397060689920/306850703299575809/396037829886738432

7.4.17b1 - SDK now demonstrate how to use AttachDelegate instead of AddProperty/SetPropertyValue

Wotever 10/16/2021 8:47 AM
Attach property is a third property declaration way :D, there are three ways :
- SetPropertyValue : The simplest but the slowest, set the value at each update loop
- Attachproperty : it allows to add a "wrapper" for a property,
  which can be set at each game loop (it was an convoluted variation of the previous one,
  skipping SetPropertyValue costs, but keeping the disavantages of requiring computations for each loop.
  I keep this one in use internally for stuffs I need to compute for each loop anyway
  (about 40 properties in grand total I would say)
- AttachDelegate : zero costs if it's not in use

Attachproperty looks like:
public AttachedProperty<int> RGBIntensity = new AttachedProperty<int>();
public void Init(PluginManager pluginManager)
{
    RGBIntensity.Value = initialvalue;
    pluginManager.AttachProperty("RGBIntensity", typeof(SerialDashPlugin), properties.RGBIntensity);
}

void anotherfunc(){
      // This update has no particular CPU costs except computing "newvalue"
       RGBIntensity.Value = newvalue;
}

AttachProperty requires computing a result at each loop;
AttachDelegate is 100% on demand:
// Declare a property available in the property list,
// this gets evaluated "on demand" (when shown or used in formulas)
// '=>' is C# syntax for lambda experssion, in this case without input parameters
// https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-operator
this.AttachDelegate("CurrentDateTime", () => DateTime.Now);


GarySwallow 09/16/2019 3:38 PM
Advanced Custom Plugin Demo</pre>
Open the <a href="https://cdn.discordapp.com/attachments/306850703299575809/623241262493073410/AdvancedCustom.PluginSdkDemo.zip"><code>AdvancedCustomUser.PluginSdkDemo.sln</code> project file</a>.<br>
<br>
<a name=HowTo><h3>SimHub SDK How-To</h3></a>
Plugins can interact via Properties, Actions and Events, where Actions (e.g. button presses) may launch Events.<br>
Properties can contain numeric or string variables.<br>
Instead of requiring code to check for changing values e.g. 60 times per second,<br>
one could presumably provoke an Event to launch code in an Action to evaluate changed Properties.<br>
Packaged as .dll files, SimHub plugins are installed by dragging into<br>
the SimHub folder containing SimHubWPF.exe and numerous other .dll files.<br>
SimHub presumably identifies plugins from other .dll files by including this line in their source:<br>
&nbsp <code>using SimHub.Plugins;</code><br>
<br>

SimHub and its plugin SDK are in C#.<br>
My struggles with C# and Visual Studion are addressed in <a href="VisualStudio.htm"><b>this C# Visual Studio How-To</b></a>.<br>
 &nbsp &nbsp <b>-</b> SimHub wants .NET framework 4.8, per Wotever 8.2.0 release 12/16/2022<br>
<br>
<h4>First tip: start with a working example plugin</h4>
Conventions for plugin C# may differ appreciably from generic .NET C# apps:
<li>Not an App;&nbsp DLL launched from within SimHub
<li>Best created in a <code>SimHub/PluginSdk/</code> folder;&nbsp relative path to SimHub classes and dll build destination
<li>Sadly, at least Visual Studio 2019 rejects <i>relative</i> path to <code>SimHubWPF.exe</code> for Debug;&nbsp must be absolute.
<li>Obvious starting place:&nbsp <code>SimHub/PluginSdk/User.PluginSdkDemo/</code>
<li>Also simple, already a GitHub project:&nbsp
 <a href="https://github.com/viper4gh/SimHub-Plugin-CalcLngWheelSlip"><code>SimHub/PluginSdk/CalcLngWheelSlip</code></a><br>
<br>

"When you create properties they are available inside the Properties list.<br> &nbsp
 Then to access them you need to create the xaml page in Visual Studio for your plugin" -
 <a href="https://discord.com/channels/299259397060689920/306850703299575809/1038925004965941269">Discord</a><br>
<img width=640 src="https://media.discordapp.net/attachments/306850703299575809/1038925004865273927/image.png"><br clear=all>
<dl>
<dt><br>SimHub plugins can add so-called <i>properties</i> which can be read in other plugins e.g. ShakeIt.<br>
<dd>Similarly, plugins can read properties that are e.g. set in ShakeIt plugin.<br>
e.g. (<a href="https://github.com/andreasdahl1987/DahlDesignProperties">Dahl Design Properties</a>
<a href="https://dahl-design.gitbook.io/properties/introduction/install#additional-setup">reads and sets properties</a> in
<a href="https://github.com/andreasdahl1987/DahlDesignProperties/blob/6c61e69e93ac3ddd97e9ba49972797ab8ddc66d2/iRacing/iRacing.cs#L1220">iRacing.cs</a>).
<pre>
...
namespace DahlDesign.Plugin.iRacing
{
  public class Data : SectionBase
  {
    public override void Init(PluginManager pluginManager)
    {
...
      InitializeLists();

      #region SimHub Properties
...
      Base.AddProp("SlipLF", 0);
      Base.AddProp("SlipRF", 0);
      Base.AddProp("SlipLR", 0);
      Base.AddProp("SlipRR", 0);
...
      #endregion
    }

    public override void DataUpdate()
    {
...
      double slipLF = Convert.ToDouble(Base.GetProp("ShakeITMotorsV3Plugin.Export.WheelSlip.FrontLeft"));  //Wheel slip
      double slipRF = Convert.ToDouble(Base.GetProp("ShakeITMotorsV3Plugin.Export.WheelSlip.FrontRight"));  //Wheel slip
      double slipLR = Convert.ToDouble(Base.GetProp("ShakeITMotorsV3Plugin.Export.WheelSlip.RearLeft"));  //Wheel slip
      double slipRR = Convert.ToDouble(Base.GetProp("ShakeITMotorsV3Plugin.Export.WheelSlip.RearRight"));  //Wheel slip
...

      Base.SetProp("SlipLF", slipLF);
      Base.SetProp("SlipRF", slipRF);
      Base.SetProp("SlipLR", slipLR);
      Base.SetProp("SlipRR", slipRR);
    }
  }
}
</pre>
At least in theory, by appropriately glueing something like this to MIDI code,<br>
MIDI sliders can be used to set SimHub property values,
while SimHub property values can be used to set MIDI values for e.g. VST level trimmers

<dt><br><b>Second tip:&nbsp Initializing properties</b>
<dt><br>Plugins can access <a href="./#CCEx">Custom Expression</a> properties during Init {}.
<dd>SimHub evaluates those custom expressions before [re]launching plugins after game changes.

<dt><br>Global properties can also be created using NCalc;
<dd>examples are available in e.g. <a href="https://github.com/blekenbleu/blekenbleu.MIDIio/blob/main/MIDIio.ini"><code>\SimHub\NCalcScripts\examples.ini</code></a>

<dt><br>C# plugin source and discussions
<dd>Here is <a href="PluginDemo.cs">an older and smaller PluginDemo.cs</a>.
</dl>
<hr>
<a name=ChatGPT><h3>OpenAI ChatGPT code for SImHub plugin using DryWetMIDI</h3></a>
<pre>
// Here is an example of how you might use the DryWetMIDI library
// in a SimHub plugin to send MIDI messages:

using SimHub;
using DryWetMIDI.Devices;
using DryWetMIDI.Interaction;

namespace MySimHubPlugin
{
    public class MySimHubPlugin : Plugin
    {
        private OutputDevice _midiOut;

        public override void Start()
        {
            // Connect to the first available MIDI output device
            _midiOut = OutputDevice.GetByName("My MIDI Device");
        }

        public override void Update()
        {
            // Send a MIDI message to turn on a note
            _midiOut.Send(new NoteOn(Channel.Channel1, 60, 100));
        }
    }
}
/* This plugin connects to the first MIDI output device that is available
 ; and sends a MIDI "note on" message to it on each frame.
 ; The message will turn on a note with a pitch of 60 (middle C)
 ; and a velocity of 100 on channel 1.
 */
</pre>
<hr>
<h5>15 Jan 2023 plugin experiment</h5>
<pre>
- rename User.PluginSdkDemo to blekenbleu.PluginSdkDemo
- update SimHub from 7.4.23 to 8.2.0, which restored/updated
  > User.PluginSdkDemo
  > User.LedEditorEffect
- User.PluginSdkDemo files:
   DataPluginDemo.cs, DataPluginDemoSettings.cs unchanged
   in User.PluginSdkDemo.csproj
        <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>            became <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>
- as with v 7.4.23, all replays work, except AC

 StreamDeck SimHub Plugin
https://www.reddit.com/r/simracing/comments/ru20od/streamdeck_simhub_plugin/

Visual Studio project folder rename
https://medium.com/c-sharp-progarmming/safely-rename-a-project-folder-visual-studio-f3c6bd4d0bd6

Rename a code symbol refactoring
https://learn.microsoft.com/en-us/visualstudio/ide/reference/rename?view=vs-2019
https://learn.microsoft.com/en-us/visualstudio/ide/class-designer/refactoring-classes-and-types?view=vs-2019
https://blog.ndepend.com/top-10-visual-studio-refactoring-tips/
</pre>
<h5>17 Jan push to GitHub; Debug output:</h5>
<code>Resource not found; ResourceKey='MahApps.Metro.Styles.FlatButtonFocusVisualStyle'</code><br>
<a href="https://stackoverflow.com/questions/63188212/wpf-mahapps-metro-resources-not-found">
change 'Styles/Accents/' to 'Styles/Themes/' in <code>Properties/DesignTimeResources.xaml</code></a><br>
<b>This actually seems to have worked.</b><br>
<br>
"It could be that you don't have an App,<br>&nbsp
 if so then you must add the resources to every Window of your extension.<br>&nbsp
 Another trick is to use the DynamicResource instead StaticResource,<br>&nbsp
  because the resources will maybe are loaded later"<br>&nbsp
<a href="https://github.com/MahApps/MahApps.Metro/issues/4046">
https://github.com/MahApps/MahApps.Metro/issues/4046</a>

</body>
</html>
