<html>
<head>
<style> body { margin-left: 80px; } h4 {margin-bottom:0} ul {margin-top:0} </style>
<title>Wi-Fi MIDI</title>
</head>
<body>
<h3>Wi-Fi MIDI</h3>
<dl>
<dt><font color=red><a href="../ESP32/midi.htm">ESP32-S2 USB MIDI</a> does not composite well with other devices (CDC, HID gamepad)</font>
<dd>Instead, send MIDI over Wi-Fi, preferably by WebSocket
<dd><i>See also</i>:
<a href="https://www.racedepartment.com/threads/simhub-plugin-s-for-output-to-midi-and-vjoy.210079/post-3446448">Race Department wireless MIDI thread</a>
<dd> &nbsp

<dt><b>Wireless MIDI flavors</b><ul>

<li><details><summary><b>Background</b>: servers, clients, senders, receivers, control surfaces, sequencers, editors, recorders, instruments</summary>
Historically, MIDI was a variation on asynchronous serial communication,<br>
using the same UART <a href="https://en.wikipedia.org/wiki/MIDI#Technical_specifications">technology</a> as in serial printers, terminals and modems,<br>
but with idiosynchratic 31.5kbps data rate, 5-pin (ground + 2 in + 2 out) DIN connectors and 5 Volt signals,<br>
 instead of D-subminiature 25 or 9-pin connectors with +/-12 Volt signals
for <a href="https://en.wikipedia.org/wiki/RS-232">RS-232</a>.<br><br>
More crucially, while RS-232 is essentially point-to-point between data terminals and carriers,<br>
MIDI was daisy-chained, with signals passed among devices with could both initiate and receive packets.<br>
Consequently, MIDI packets include addressing for 16 channels, to selectively send and receive packets along the shared bus.<br><br>
While all MIDI devices may send and receive messages, instruments are typically receivers,<br>
while control surfaces and sequencers are typically senders.<br>
Once IP networking is involved, server and client roles get involved.<br>
Either senders or receivers can be either servers or clients.<br>
Since web browsers can play music, JavaScript to behave as client instruments is relatively popular.
<a href="https://xmmc.de/mnet/">mnet MIDIHub</a>, our designated bridge between IP and MIDI,<br>
behaves as a client for UDP, but a server for ipMIDI AKA multicast IP.<br>
It also behaves as a client for TCP WebSocket, looking for servers to announce (via DNS) MIDI service.<br>
For Apple MIDI (AKA RTP), it uses one UDP port for control and another for MIDI messages<br>
Whether it wants one or two ports for TCP WebSockets is unclear.<br>
At any rate, code for Websocket MIDI control surface servers is relatively rare.<br>
<br></details>

<li><details><summary><a href="https://users.cs.cf.ac.uk/Dave.Marshall/Multimedia/node158.html"><b>MIDI 1.0 messages</b></a> <i>mostly</i> include 3 bytes, one for status and 2 for data.</summary><ul>
<li>Data bytes are constrained to have msb=0, so only 7 bits for information.<br>
<li>The status byte has most-significant bit = 1, 4 least significant bits for addressing 16 channels,<br>
leaving 3 bits for message types, 7 of which (8x - Ex) are for channel messages:<table>
<th>Status Byte</td><td>hex</td><td>Data Byte1 </td><td>Data Byte2</td></th>
<tr><td>Note off         </td><td>8x</td><td>Key number      </td><td>Note Off velocity</td></tr>
<tr><td>Note on          </td><td>9x</td><td>Key number      </td><td>Note on velocity</td></tr>
<tr><td>Polyphonic Key Pressure</td><td>Ax</td><td>Key number</td><td>Amount of pressure</td></tr>
<tr><td><b>Control Change</b> (CC)   </td><td>Bx</td><td>Controller 0-120 </td><td>Controller value</td></tr>
<tr><td>Control Mode     </td><td>Bx</td><td>79: reset all    </td><td>00              </td></tr>
<tr><td>Control Mode     </td><td>Bx</td><td>7A: Local        </td><td>0:off 127:on    </td></tr>
<tr><td>Control Mode     </td><td>Bx</td><td>7B: All notes off</td><td>00              </td></tr>
<tr><td>Control Mode     </td><td>Bx</td><td>7C: Omni off     </td><td>00              </td></tr>
<tr><td>Control Mode     </td><td>Bx</td><td>7D: Omni on      </td><td>00              </td></tr>
<tr><td>Control Mode     </td><td>Bx</td><td>7E: Mono on      </td><td>0 or channel cnt</td></tr>
<tr><td>Control Mode     </td><td>Bx</td><td>7F: Poly on      </td><td>00              </td></tr>
<tr><td>Program Change   </td><td>Cx</td><td>Program number   </td><td>None</td></tr>
<tr><td>Channel Pressure </td><td>Dx</td><td>Pressure value   </td><td>None</td></tr>
<tr><td>Pitch Bend       </td><td>Ex</td><td>MSB              </td><td>LSB</td></tr>
<tr><td>SysEX start      </td><td>F0</td><td>many bytes       </td><td>... </td></tr>
<tr><td>Timing code      </td><td>F1</td><td>only 1 byte      </td><td>(na)</td></tr>
<tr><td>Song position    </td><td>F2</td><td>MSB              </td><td>LSB</td></tr>
<tr><td>Timing code      </td><td>F3</td><td>only 1 byte      </td><td>(na)</td></tr>
<tr><td>Timing code      </td><td>F6</td><td>(na)             </td><td>(na)</td></tr>
<tr><td>SysEX stop       </td><td>F7</td><td>(na)             </td><td>(na)</td></tr>
<tr><td>Timing clock     </td><td>F8</td><td>MSB              </td><td>LSB</td></tr>
<tr><td>Start sequence   </td><td>FA</td><td>MSB              </td><td>LSB</td></tr>
<tr><td>Continue sequence</td><td>FB</td><td>MSB              </td><td>LSB</td></tr>
<tr><td>Stop sequence    </td><td>FC</td><td>MSB              </td><td>LSB</td></tr>
<tr><td>Active sensing   </td><td>FE</td><td>MSB              </td><td>LSB</td></tr>
<tr><td>System reset     </td><td>FF</td><td>MSB              </td><td>LSB</td></tr></table><br>
MIDI messages F4, F5, F9, FD are undefined.<br>
<a href="https://logosfoundation.org/kursus/1075.html"><b>Control Change</b> (CC) messages</a> are of particular interest here;<br>
many second byte values support 127 third byte values and appropriate for sliders:<br>
Hex 00-13 for MSB and 20-33 for corresponding LSB.<br>
First data byte values 70-83, 85-95 are for LSB-only second data bytes
<br></details>

<li><a href="#DSMI">DSMI</a> - old <a href="DS_MIDI_WiFi.md">protocol for Nintendo DS</a>

<li><a href="https://www.nerds.de/en/ipmidi.html">ipMIDI</a> - proprietary $79 (60 min. free trial)<br>
One of two MIDI-over-UDP protocols, uses "well-known" port;
<br>Arduino can be a relatively simple client.

<li><a href="#AM">Apple MIDI</a> - AKA RTP MIDI UDP depending on DNS broadcast
<br>Arduino must be a relatively complex server

<li><a href="#WS">WebSocket MIDI</a> - similar to Apple MIDI, except by TCP WebSocket instead of UDP<br>
  &nbsp For ESP32, AsyncUDP is bundled with Arduino core,<br>
  &nbsp but separate from AsyncTCP wanted for efficient webserver,<br>
  &nbsp making this <i>perhaps</i> the most efficient implementation.<br>
  &nbsp <br>
  <b>Apple MIDI</b> parser bundled in the
  <a href="https://github.com/lathoub/Arduino-AppleMIDI-Library/blob/master/src/AppleMIDI_Parser.h">Arduino
     library</a> does not seem robust;<br>
  &nbsp alternatives exist, e.g. in <a href="https://github.com/davidmoreno/rtpmidid">librtpmidid (C++)</a> and
   <a href="https://github.com/cbdevnet/midimonster">MIDIMonster (C)</a>
   <a href="https://github.com/cbdevnet/midimonster/blob/master/backends/rtpmidi.c">backend</a><br>
  &nbsp rtpmidid includes good-looking tests, despite C++...

<li><a href="#WM">WebMIDI</a> - similar to WebSocket MIDI; accessible from web browsers
</ul>

<a name=DSMI>
<dt>Android <b>Wireless Mixer</b> app using <a href="https://forum.gbadev.org/viewtopic.php?t=11811">DSMI</a>
<dd><a href="https://trajkovski.net/support.html">Trajkovski Labs support page</a><br>
<a href="DS_MIDI_WiFi">Installation</a></a>
<details><summary>Wireless Mixer MIDI map (CC numbers, decimal)</summary>
  &nbsp  &nbsp Master volume = 7<br>
  &nbsp  &nbsp Play = 118<br>
  &nbsp  &nbsp Stop = 120<br>
  &nbsp  &nbsp Record = 119<br>
  &nbsp  &nbsp Left = 4<br>
  &nbsp  &nbsp Right = 5<br>
  &nbsp  &nbsp Previous = 2<br>
  &nbsp  &nbsp Next = 1<br>
<table><tr><td>
   Slider1 = 8<br>
   Slider2 = 9<br>
   Slider3 = 10<br>
   Slider4 = 12<br>
   Slider5 = 13<br>
   Slider6 = 14<br>
   Slider7 = 15<br>
   Slider8 = 16<br>
   Slider9 = 17<br>
   Slider10 = 18<br>
   Slider11 = 19<br>
   Slider12 = 20<br>
</td><td>
  &nbsp  &nbsp Pan1 = 23<br>
  &nbsp  &nbsp Pan2 = 24<br>
  &nbsp  &nbsp Pan3 = 25<br>
  &nbsp  &nbsp Pan4 = 26<br>
  &nbsp  &nbsp Pan5 = 27<br>
  &nbsp  &nbsp Pan6 = 28<br>
  &nbsp  &nbsp Pan7 = 29<br>
  &nbsp  &nbsp Pan8 = 30<br>
  &nbsp  &nbsp Pan9 = 31<br>
  &nbsp  &nbsp Pan10 = 33<br>
  &nbsp  &nbsp Pan11 = 34<br>
  &nbsp  &nbsp Pan12 = 35<br>
</td><td>
  &nbsp  &nbsp Knob1-1 = 39<br>
  &nbsp  &nbsp Knob1-2 = 40<br>
  &nbsp  &nbsp Knob1-3 = 41<br>
  &nbsp  &nbsp Knob1-4 = 42<br>
  &nbsp  &nbsp Knob1-5 = 43<br>
  &nbsp  &nbsp Knob1-6 = 44<br>
  &nbsp  &nbsp Knob1-7 = 45<br>
  &nbsp  &nbsp Knob1-8 = 46<br>
  &nbsp  &nbsp Knob1-9 = 47<br>
  &nbsp  &nbsp Knob1-10 = 48<br>
  &nbsp  &nbsp Knob1-11 = 49<br>
  &nbsp  &nbsp Knob1-12 = 50<br>
</td><td>
  &nbsp  &nbsp Knob2-1 = 53<br>
  &nbsp  &nbsp Knob2-2 = 54<br>
  &nbsp  &nbsp Knob2-3 = 55<br>
  &nbsp  &nbsp Knob2-4 = 56<br>
  &nbsp  &nbsp Knob2-5 = 57<br>
  &nbsp  &nbsp Knob2-6 = 58<br>
  &nbsp  &nbsp Knob2-7 = 59<br>
  &nbsp  &nbsp Knob2-8 = 60<br>
  &nbsp  &nbsp Knob2-9 = 61<br>
  &nbsp  &nbsp Knob2-10 = 62<br>
  &nbsp  &nbsp Knob2-11 = 63<br>
  &nbsp  &nbsp Knob2-12 = 65<br>
</td><td>
  &nbsp  &nbsp Knob3-1 = 102<br>
  &nbsp  &nbsp Knob3-2 = 103<br>
  &nbsp  &nbsp Knob3-3 = 104<br>
  &nbsp  &nbsp Knob3-4 = 105<br>
  &nbsp  &nbsp Knob3-5 = 106<br>
  &nbsp  &nbsp Knob3-6 = 107<br>
  &nbsp  &nbsp Knob3-7 = 108<br>
  &nbsp  &nbsp Knob3-8 = 109<br>
  &nbsp  &nbsp Knob3-9 = 110<br>
  &nbsp  &nbsp Knob3-10 = 111<br>
  &nbsp  &nbsp Knob3-11 = 112<br>
  &nbsp  &nbsp Knob3-12 = 113<br>
</td></tr><tr><td>
  Mute1 = 66<br>
  Mute2 = 67<br>
  Mute3 = 68<br>
  Mute4 = 69<br>
  Mute5 = 70<br>
  Mute6 = 71<br>
  Mute7 = 72<br>
  Mute8 = 73<br>
  Mute9 = 74<br>
  Mute10 = 75<br>
  Mute11 = 76<br>
  Mute12 = 77<br>
</td><td>
  &nbsp  &nbsp Solo1 = 78<br>
  &nbsp  &nbsp Solo2 = 79<br>
  &nbsp  &nbsp Solo3 = 80<br>
  &nbsp  &nbsp Solo4 = 81<br>
  &nbsp  &nbsp Solo5 = 82<br>
  &nbsp  &nbsp Solo6 = 83<br>
  &nbsp  &nbsp Solo7 = 84<br>
  &nbsp  &nbsp Solo8 = 85<br>
  &nbsp  &nbsp Solo9 = 86<br>
  &nbsp  &nbsp Solo10 = 87<br>
  &nbsp  &nbsp Solo11 = 88<br>
  &nbsp  &nbsp Solo12 = 89<br>
</td><td>
  &nbsp  &nbsp Rec1 = 90<br>
  &nbsp  &nbsp Rec2 = 91<br>
  &nbsp  &nbsp Rec3 = 92<br>
  &nbsp  &nbsp Rec4 = 93<br>
  &nbsp  &nbsp Rec5 = 94<br>
  &nbsp  &nbsp Rec6 = 95<br>
  &nbsp  &nbsp Rec7 = 96<br>
  &nbsp  &nbsp Rec8 = 97<br>
  &nbsp  &nbsp Rec9 = 98<br>
  &nbsp  &nbsp Rec10 = 99<br>
  &nbsp  &nbsp Rec11 = 100<br>
  &nbsp  &nbsp Rec12 = 101<br>
</td><td>
  &nbsp  &nbsp ExBtn1_1 = 11<br>
  &nbsp  &nbsp ExBtn1_2 = 21<br>
  &nbsp  &nbsp ExBtn1_3 = 22<br>
  &nbsp  &nbsp ExBtn1_4 = 32<br>
  &nbsp  &nbsp ExBtn1_5 = 36<br>
  &nbsp  &nbsp ExBtn1_6 = 37<br>
  &nbsp  &nbsp ExBtn1_7 = 38<br>
  &nbsp  &nbsp ExBtn1_8 = 51<br>
  &nbsp  &nbsp ExBtn1_9 = 52<br>
  &nbsp  &nbsp ExBtn1_10 = 124<br>
  &nbsp  &nbsp ExBtn1_11 = 125<br>
  &nbsp  &nbsp ExBtn1_12 = 126<br>
</td><td>
  &nbsp  &nbsp ExBtn2_1 = 114<br>
  &nbsp  &nbsp ExBtn2_2 = 115<br>
  &nbsp  &nbsp ExBtn2_3 = 116<br>
  &nbsp  &nbsp ExBtn2_4 = 117<br>
  &nbsp  &nbsp ExBtn2_5 = 121<br>
  &nbsp  &nbsp ExBtn2_6 = 122<br>
  &nbsp  &nbsp ExBtn2_7 = 123<br>
  &nbsp  &nbsp ExBtn2_8 = 127<br>
  &nbsp  &nbsp ExBtn2_9 = 64<br>
  &nbsp  &nbsp ExBtn2_10 = 6<br>
  &nbsp  &nbsp ExBtn2_11 = 5<br>
  &nbsp  &nbsp ExBtn2_12 = 3(?)<br>
</td></tr></table></details>
<dd> &nbsp

<a name=WM>
<dt><font size=+1><b>WebMIDI over WebSocket directly from the web page</b></font></a>
<dd><a href="https://github.com/hhromic/midi-websocket">A general purpose MIDI over WebSocket approach</a>
<br> &nbsp using <a href="https://github.com/Olical/EventEmitter">EventEmitter JavaScript</a>
<dd> &nbsp

<a name=WS>
<dt><font size=+1><b>MIDI over WebSocket</b></a>
<dd><a href="https://github.com/me-no-dev/ESPAsyncWebServer">ESPAsyncWebServer</a> examples include WebSocket server and client examples
<dd><a href="https://randomnerdtutorials.com/esp32-websocket-server-arduino/">ESP32 WebSocket Server</a> - Random Nerd
<dd><a href="https://www.mischianti.org/2020/12/07/websocket-on-arduino-esp8266-and-esp32-client-1">esp32 WebSocket client</a> - Mischianti
<dd><a href="https://www.dfrobot.com/blog-776.html">ESP32 Arduino Tutorial: Websocket client</a> - DFRobot 2017
<br><a href="https://techtutorialsx.com/2017/11/01/esp32-arduino-websocket-client/">ESP32 Arduino: Websocket client</a>
<br> &nbsp <a href="https://github.com/morrissinger/ESP8266-Websocket/tree/master/examples">ESP8266-Websocket server and client examples</a>
<br> &nbsp <a href="https://github.com/skaarj1989/mWebSockets/tree/master/examples/simple-client">simple-client sketch</a>
<dd><a href="https://www.tutorialspoint.com/html5/html5_websocket.htm">HTML5 - WebSockets tutorial</a> with Client-side HTML &amp JavaScript code
<dd><a href="https://medium.com/nebo-15/tutorial-how-to-create-midi-synthesizer-with-midi-api-and-node-js-48d41c162009">Tutorial: How to create a MIDI synthesizer with MIDI API and Node JS</a>
<dd><a href="https://github.com/TrollStation/obs-websockets-midi">OBS-Websockets-MIDI Bridge</a>
<dd> &nbsp

<dt>PC MIDI servers
<dd><a href="https://www.turboirc.com/mcp/manual.htm#connectwin">MCPW.EXE</a>, seemingly compatible with RTP MIDI or TCP;<br>
 &nbsp requires a separate MIDI port provider, e.g. <a href="https://www.tobias-erichsen.de/software/loopmidi.html">loopMIDI</a>
<dd><a href="https://www.tobias-erichsen.de/software/rtpmidi.html">rtpMIDI server</a><br>
<dd><a href="https://xmmc.de/mnet">mnet MIDIHub</b></font></a> 32/64-bit WinMM MIDI driver<br>
 &nbsp supports ipMIDI, RTP, WebSocket, WebMIDI and Bluetooth;<br>
 &nbsp provides its own MIDI ports:<ul>
  <img src="MIDIHub.png"><br clear=all><br>
  <li>as warned, MIDIHub provokes firewall pop-ups for MIDI apps<br>
      <img src="firewall.png">
  <li>"owned" by voicemeeterpro on initial launch
  <li>Its documentation suggests that it can be both a websocket server and client.
  <li><code>mnet.log</code> reports: <code>WebSocketIO - server listening on port: 6504</code>
  <li>Web browser JavaScript is not allowed to create a WebSocket server,<br>
      but a JavaScript client to open a WebSocket to that port and try sending some MIDI messages <i>may not be too hard</i>;<br>
      here are <a href="https://code.tutsplus.com/tutorials/introduction-to-web-midi--cms-25220">an article</a>
      and <a href="https://github.com/fa-m/midi-websocket">sample browser code</a>.
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers">Writing WebSocket servers</a><br>
      responding to pings.
  </ul>
<dd><a href="https://github.com/hhromic/midi-websocket">MIDI WebSocket</a> - includes both nodejs client and server, as well as JavaScript for a web browser client<br>
  &nbsp whether and how compatible with e.g. mnet MIDIHub is unknown..
<dd> &nbsp

<a name=AM>
<dt><b>Apple MIDI over UDP</b></a>
<dd><a href="https://john-lazzaro.github.io//rtpmidi"><b>RTP MIDI</b></a>:
 &nbsp <a href="https://developer.apple.com/library/archive/documentation/Audio/Conceptual/MIDINetworkDriverProtocol/MIDI/MIDI.html">Apple network MIDI (UDP)</a>,
 &nbsp <a href="https://github.com/ohnoitsalobo/sound-reactive-esp32">AppleMIDI with ESPAsyncWebServer examples</a>
<dd>Apple's <a href="https://developer.apple.com/library/archive/documentation/Audio/Conceptual/MIDINetworkDriverProtocol/MIDI/MIDI.html">MIDI
 Network Driver Protocol</a> Document
<dd> &nbsp

<dt><a href="https://projectgus.github.io/hairless-midiserial">Hairless MIDI&lt-&gtSerial Bridge</a>
<dd>connect serial devices (e.g. Arduinos) to send and receive MIDI signals

<dt><a href="https://github.com/madnerdorg/libreconnect">LibreConnect Server</a><dd>generates websockets for serial USB-attached Arduinos
</dl>

<h4><a href="https://github.com/blekenbleu/composite_sketches">Learning by doing</a></h4><ul>
<li><a href="">AsyncUDP example</a> - library provided with Expressif ESP32 core for Arduino;<br>
   may be extended for MIDI support as a learning step;  <a href="https://github.com/lathoub/Arduino-AppleMIDI-Library">AppleMIDI for Arduino</a> supports ESP32
<li><a href="">AsyncTCP example</a> - GitHub library; will be extended for MIDI support,<br>
   to avoid running both it (for webserver) and AsyncUDP<ul>
   <li>this sketch can only make a single response per opening</ul>
<li>Restarting Serial Monitor for either of the above examples <i>restarts the connection</i>..
<li>ESP32_NoteOnOffEverySec.ino from
  <a href="https://github.com/lathoub/Arduino-AppleMIDI-Library/tree/master/examples">Arduino-AppleMidi-Library examples</a><ul>
  <li><a href="https://xmmc.de/mnet/">mnet MIDIHub</a> does not seem to work as described<br>
      supposedly hidden by default, multicast ports appear
  <li>RTP ports seemingly <i>only appear if detected</i> by
  <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/protocols/mdns.html">multicast DNS</a><br>
  <code>service_type</code> evidently should be <a href="http://www.dns-sd.org/serviceTypes.html"><code>_apple-midi</code></a>.
  </ul>
<li><a href="https://github.com/lathoub/Arduino-AppleMIDI-Library/blob/master/examples/wESP32_NoteOnOffEverySec/wESP32_NoteOnOffEverySec.ino">wESP32_NoteOnOffEverySec.ino</a>
 includes <code>MDNS.addService("apple-midi", "udp", AppleMIDI.getPort());</code><ul>
 <li>replaced <code>ETH.begin();</code> in <code>ETH_Heelper.h:ETH_startup()</code> with <code>WiFi.begin()</code>
 <li>MIDIHub recognizes the device, and the sketch reports <code>Connected to session 4155933516 mnet (ALIENWARE-R7_144) 8</code>,<br>
    but also reports <code>*** ListenerTimeOutException</code> and many <code>*** ParseException</code>,<br>
    which occur in <code>AppleMIDI.hpp:parseControlPackets()</code>,<br>
    based on <code>UnexpectedData</code> returned from <code>AppleMIDI_Parser.h: parse()</code> returning <code>UnexpectedData</code><br>
    which it does for too many reasons: signature, protocolVersion, or not having previously returned something.
 <li>Adding debugging code to <code>AppleMIDI_Parser.h</code> revealed that most ParseExceptions were an unexpected and long signature.
 <li>Added more debugging code to understand AppleMIDI_Parser
<details><summary>then MIDI traffic <i>sometimes</i> began flowing:</summary>
<pre>ESP-ROM:esp32s2-rc4-20191025
Build:Oct 25 2019
rst:0x1 (POWERON),boot:0x8 (SPI_FAST_FLASH_BOOT)
SPIWP:0xee
mode:DIO, clock div:1
load:0x3ffe6100,len:0x570
load:0x4004c000,len:0xa50
load:0x40050000,len:0x28d8
entry 0x4004c18c
wESP32_NoteOnOffEverySec.ino Booting
Establishing connection to WiFi..
Establishing connection to WiFi..
Establishing connection to WiFi..
Establishing connection to WiFi..
Establishing connection to WiFi..
Connected to network as  192.168.1.185
OK, now make sure an rtpMIDI session is Enabled
Add device named Arduino with Host 192.168.1.185 Port 5004
The device should also be visible in the directory as AppleMIDI-ESP32
Select and then press the Connect button
Then open a MIDI listener and monitor incoming notes
amSignature match
amSynchronization match
*** ParticipantNotFoundException -772189380
amSignature match
amSynchronization match
*** ParticipantNotFoundException -772189380
amSignature match
amSynchronization match
*** ParticipantNotFoundException -772189380
amSignature match
amInvitation match
amProtocolVersion match
amSignature match
amInvitation match
amProtocolVersion match
amSignature match
amInvitation match
amProtocolVersion match
Connected to session 3522777916 mnet (ALIENWARE-R7_144)
first MIDI.sendNoteOn()</pre></details>
  MIDI-OX must connect to the configured MIDIHub port (e.g. <code>MIDIHUB PORT 2</code>) <i>after</i>
  <li><i>Without</i> Serial Monitor running and <i>with</i> MidiView already watching <code>MIDIHUB PORT 2</code>,<br>
  MIDI traffic seems to flow OK..<br>
  &nbsp MIDIHub <i>sometimes</i> allows both MIDI_OX and MidiView
  to simultaneously read <code>MIDIHUB PORT</code>.
 </ul>

<li><a href="https://github.com/lathoub/Arduino-ipMIDI"><b>Arduino ipMIDI Transport</b><a> on <code>MIDIHUB PORT 1</code>
<br>The <a href="https://github.com/blekenbleu/composite_sketches/blob/main/ESP32_NoteOnOffipMIDI/ESP32_NoteOnOffipMIDI.ino">ESP32_NoteOnOffipMIDI
  sketch</a> seemed too simple to work with MIDIHub.. but it <i>sometimes does</i>.<br>
  It seems to work more consistently when Serial Monitor is used until notes start,<br>
  &nbsp then connecting MidiView to MIDIHUB PORT 1,<br>
  but it still (also) occasionally stops for no known reason..<br>
  <a href="http://livehelp.solidstatelogic.com/Help/ipMIDI.html">This page</a> describes IP routing magic for ipMIDI.

<li>Arduino <a href="https://microdigisoft.com/esp32-web-server-spi-flash-file-system-spiffs"><b>ESP32 Sketch Data Upload</b></a> tool installation<ul>
  <li>Download the latest <a href="https://github.com/lorol/arduino-esp32fs-plugin/releases/latest">esp32fs.zip file</a>
  <li>Unzip <code>esp32fs.jar</code> into <code>arduino-1.8.16\tools\ESP32FS\tool\</code><br><img src="tools.png">
  <li>Launch Arduino and check for <b>ESP32 Sketch Data Upload</b> under Tools:<br><img src="Upload.png">
  <li>Files to be uploaded should be in a <code>Data</code> folder inside the sketch folder:<br><img src="data_folder.png">
  <li>Launch that tool <i>after</i> uploading the sketch, then in Serial Monitor: &nbsp <code>SPIFFS mounted successfully</code><br>
      take care to select SPIFF: &nbsp <img align=top src="SPIFFS.png"><br clear=all>
      &nbsp
</ul>
<li><a href="https://github.com/blekenbleu/composite_sketches/tree/main/ESP32-SPIFFS-RGB-sliders">ESP32-SPIFFS-RGB-sliders</a> uses WebSockets.<br>
  The Arduino server updates all webpage clients to current slider settings;<br>
  need to sort how to separately send binary MIDI to <code>mnet MIDIHub</code>
</ul>
</body>
</html>
