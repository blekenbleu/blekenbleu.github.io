<html>
<head>
<style>
body {
   width:960px;
   margin-left:60px;
}
</style>
</head>
<body>
<font size=-1><a href=./><i>back</i></a></font><br>
<br>
<h3>IBM</h3>
<pre>
My "defense" contractor "career" ended after the <a href="https://en.wikipedia.org/wiki/Operation_Linebacker_II">Christmas bombing</a>, which meant that
I lost my beard and long hair to attend Signal Corps Officer Basic Training, near Augusta GA,
after which Hazeltine planned my deployment to Turkey, <a href="https://en.wikipedia.org/wiki/Turkish_invasion_of_Cyprus">which was preparing to invade Cyprus</a>,
while also sending contractor support to Greece.  This struck me as <i>a really bad idea</i>,
but a college friend already working for IBM finagled me interviews in Endicott.
Officer basic <a href="https://www.law.cornell.edu/uscode/text/38/101#22">active duty for training</a> occurred before the <a href="https://en.wikipedia.org/wiki/Fall_of_Saigon">Fall of Saigon</a>;
I may, in theory, be <a href="https://www.govinfo.gov/content/pkg/CFR-2004-title5-vol1/pdf/CFR-2004-title5-vol1-sec307-103.pdf">a Vietnam veteran</a>..?!

One opening was as a System 370 microcoder; seeing a row of guys pounding away on keypunches,
I visualized pencils being ground to stubs.  Another opening was in Cost Engineering,
about which I knew nothing, but that manager was impressive, and engineering is essentially economic deployment of resources,
so this would be a learning experience.  Naturally, that manager vanished within months of my employment.
Having been hired with notably more experience than typical engineering grads, I started as a senior associate
instead of the usual junior associate.  While this meant that the usual 6 month probation was skipped,
it also resulted in my not being promoted until well after relocating to Charlotte.
A more astute IBMer would have known that a promotion could have been negotiated as part of that relocation.

As a field engineer, I would brag about reading electronics schematic diagrams the way others might read comic books.
That was of no use as an IBM cost engineer, where my assignment was to estimate scrap and rework costs for the mythical FS.
Symbolically, cost engineers were obliged to meticulously account weekly for how their 40 hours were consumed,
and I would always include at least an hour for that accounting, but was directed to charge most of my time against
so-called recon products.  IBM mostly leased mainframes, and obsolete models returned from lease would be
reconned into peripheral controllers.  While IBM's mainframe success was largely based on having sorted
backward compatibility, their mid-range commercial mainframes were cost-competitive mostly because of fast I/O
than raw compute speed.  IBM allocated costs according by so-called waterfall, where a burden was added to labor
by distributing indirect costs (e.g. my salary) across products.

My first love at IBM was <a href="https://en.wikipedia.org/wiki/APL_(programming_language)">APL</a>.
I was not the first cost engineer to embrace it, but quickly converted all my work to use APL.
IBM professional employees in Endicott, at least, were nearly all still submitting programming by coding sheets.
Since my handwriting is mostly illegible even to me, that was doomed,
but in my building only some executive secretaries had access to display terminals.
APL is such a wonderfully terse language (a single line can do more than a page of Cobol, Fortran or Basic)
that my miserable typing skills were scarcely an impediment.  I soon obtained my own <a href="https://www.computerhistory.org/collections/catalog/102696478">APL Selectric typeball</a>
and monopolized a <a href="https://en.wikipedia.org/wiki/IBM_2741">noisy 2741</a> to the extent that I was relocated from the cost engineering bullpen
to an isolated corner office, overlooking <a href="https://www.google.com/maps/@42.1073918,-76.042861,867m/data=!3m1!1e3">the North and McKinley intersection</a>:
<a href="https://www.google.com/maps/@42.1052383,-76.0447717,3a,75y,14.74h,87.7t/data=!3m6!1e1!3m4!1sfVzY7pSyKnNhWyjZQvnT_Q!2e0!7i16384!8i8192"><img width=90% src=orifice.jpg></a>

Our rented house was within walking distance of IBM;  typically poor weather
motivated entering at the diagonally opposite (<a href="https://www.google.com/maps/place/98+N+Adams+Ave,+Endicott,+NY+13760/@42.1073212,-76.0443284,816m/data=!3m1!1e3!4m5!3m4!1s0x89daecf44f2d554f:0x9d085dde991ac47a!8m2!3d42.1090114!4d-76.0426723">N Adams and Watson</a>) corner of connected buildings.
Coincidentally, this meant that I would regularly pass by the area [re]building my assigned products.
It eventually came out that I was the only cost engineer,
except for a couple of old-timers who actually did time-motion,
who knew where their products were being assembled.

<a name="1"><b>Joe Who</b></a>
At IBM, I worked only in cost engineering, then product assurance.
Our experience rather differed from typical directs
working in manufacturing, research, development, service, sales or marketing;
we relatively frequent had visitors from headquarters staff.  For example,
product assurance management reported to division, not site managers.
On his second or third visit from headquarters, one cornered me to explain
that some senior executive had lost a son (Vietnam?) and wanted to act as patron to some likely guy.
This totally freaked me, and was my first conscious experience of what I call an <a href="./me.htm#PT">inflection point</a>.
Had I been savvy and sanguine, I might have leveraged that into retirement as an IBM VP or so...
Meanwhile, it soon became evident that managers were quickly rotated thru these areas of regular HQ attention.
It would be years before I heard the phrase "designated executive potential", but much sooner began to recognize the type.
Alternating with career drones who more or less focussed on work would be these clean cut white types who wear suits well.
My first was <i>Joe Who</i>.   Joe had some last name, but I never caught it during the brief time he was our manager.
At least weekly, some stranger would come by asking for Joe.  Disturbed from some coding meditation, I would react "Joe Who?"
.. and I was not the only one.  Thing was, Joe <i>did not look like</i> any regular Joe, and spent nearly no time in our area.

FS scrap and rework estimation became relatively trivial
after observing that historical ship volumes over time resembled <a href="https://en.wikipedia.org/wiki/Chi-squared_distribution">Chi-squared_distribution</a>.
FS hardware was interesting: liquid-encapsulated multi-chip modules.
Development provided EC projections, and costs were wanted only for machines actually on the production line,
implying that machines already shipped would either not get updated or would have costs absorbed e.g. by service..?
Whatever, the only guesswork was imagining how long machines would languish on assembly lines.
After all that was coded, by far the longest part of performing cost estimates was printing out results.
At that time, lots of IBM employees' time was spent coding numbers from candy stripe printouts into other programs...
Obtaining on-line access to their <a href="https://www.ibm.com/ibm/history/exhibits/storage/storage_3850.html">mass storage system</a> from a <a href="https://en.wikipedia.org/wiki/IBM_5120">5120</a> bypassed that.

This left me with spare free time.  Folks show up with other APL projects:
*  rewriting their waterfall burden distribution program from <a href="https://en.wikipedia.org/wiki/Service_Bureau_Corporation">SBC Basic</a>
   Slogging thru that source, it became evident that,
   instead of understanding and correcting existing code,
   "maintainers" had been adding replacement routines, leaving dead code behind.
   I forget how many pages of Basic source, but its APL replacement was less than a page.
*  writing stock option software with which IBM would gamble free cash over weekends.
*  writing human resources management code, working with an executive secretary,
   made somewhat interesting because I was not allowed to see the data.
*  writing a generic cost justification proposal generator
   Basically, machine learning random buzzword generation.

<a name=V><b>VTL</b></a>
IBM Endicott was big on technical vitality, perhaps motivated by experienced engineers feeling threatened by technology changes.
My senior year at Clarkson was the first with lab projects NOT involving vacuum tubes.
By the 1970s, not only was it over 60% of the computer market,
IBM was also practically a vertical monopoly, making most of its own components,
with very few suppliers sharing any profits.
Covers were a relatively trivial fraction of product costs, but one of the most debated in meetings.
Issues were typically resolved so late that cover vendors could charge a premium for expedited tooling...

Vertical integration enabled top-down design, with IBM components specific to intended products.
IBM specifications were not only classified, but also unnecessarily difficult to digest,
written by folks enamored of the concept that if one cannot dazzle, one can at least baffle.
Meanwhile GE and TI published plentiful and clear documentation for TTL (Transistor-Transistor Logic),
which IBM referred to as VTL (Vendor Technology Logic).  Unlike military contractors, who would
misuse approved components rather than bother getting more appropriate components approved,
younger IBM engineers working on peripheral products that I would be assuring were seduced by VTL.
These products were not considered major profit centers, but were instead "drag"
that enabled IBM marketing to offer business customers completely integrated solutions.

I took one internal IBM course on microcoding.  The basic concepts:
CPU logic is much faster than memory, potentially wasting many processing cycles while waiting for data.
Embedded microcode could implement multiple simple instructions cheaper than equivalent hardware for complex instructions.
The final course challenge was implementing microcode for some sequence of machine instructions in a minimum number of cycles.
I beat their record using a technique eventually called <a href="https://en.wikipedia.org/wiki/Speculative_execution">speculative execution</a>.
Still resisting being ground to a nub writing System 370 microcode, I did not pursue it.

The eventual <a href="https://people.computing.clemson.edu/~mark/fs.html">implosion of FS</a> left me without an official assignment.
A product assurance opening in the Glendale development lab was available,
but I was required to first write operating manuals for code being left behind.
This taught a valuable lesson about documenting <i>while</i> coding;
if that documentation becomes too complex, rewrite simpler code.
I also discovered:
* it took about 6 weeks to become productive in new (to me) technology
* after about 6 months, I would be forgetting less useful things at about the same rate as learning more useful refinements.

The product assurance technician for code entry in my department used a <a href="https://vintagecomputer.ca/ibm-3277-terminal/">3277</a>,
and I quickly negotiated access to it.
Field engineering experience meant that I became their designated world trade ship test delegate.
The products were dumb terminals for manufacturing <a href="https://bitsavers.org/pdf/ibm/8100/GA27-2875-0_An_Introduction_to_the_IBM_8100_Information_System_Oct1978.pdf">("Plant Communication Devices", page 31/146)</a>,
attached by proprietary networking called <a href="https://en.wikipedia.org/wiki/IBM_8100#Architecture">R-Loop</a>.
The terminals were boring, but I was assigned to test the controller and help verify an analog input option for the 3644 Automatic Data Unit.
That analog input option took many months to debug;
so far as I know, the only unit "sold" was for our manufacturing verification test.
R-Loop was the less crude predecessor to Token Ring, a rather larger fiasco.
My "contributions" to R-Loop technology were:
- pointing out that specified cable impedance was meaningless at R-Loop frequencies
- predicted network reliability would be less than that of old-fashion Christmas tree lights,
  with any failure on a loop bringing everything down.
Token Ring inherited both those short-comings, but with added complexities.
The key benefit to me was that these products were transferred to newly-announced IBM Charlotte,
along with banking terminals from IBM Kingston and random printers.

My lasting impression of IBM Endicott was how like the military it felt.

<b>Charlotte</b>
Unlike Endicott, where only the paint has peeled, little in Charlotte seems unchanged.
Rather that wait for their new campus to be constructed, IBM rented space for us,
initially in bank skyscrapers (since renamed), <a href="https://www.google.com/maps/search/Charlotte,+NC+banks/@35.2249397,-80.8473626,956m/data=!3m1!1e3!4m2!2m1!6e2">downtown between 1st and 4th, S Church and Brevard</a>.
Space needed for testing soon had product assurance relocated to our own lab over a parking garage,
where the (ex-Endicott) lab manager joked that rotting carpet was the main heat source.
Manufacturing terminal testing had been nearly complete before relocating from Endicott;
I did hack a robot arm for automated testing of a card reader,
but most work involved integrating those terminals with 8100 and a System 370 option,
which earned me some months in Germany, where I somehow mostly programmed on an HP minicomputer.
<a name=2>
Meanwhile, development and testing for <a href="http://kishy.ca/?p=648">Kingston's 4700 replacement</a> of 3600 banking terminals was a mess.
Relatively few experienced engineers had transferred from Endicott, but even fewer moved from Kingston.
I was promoted to staff engineer and drafted into a department
with limited technical expertise and negligible testing experience.
Probably only their manager was older than I...
In one meeting, that manager was chastising other department members,
citing me as an example of someone to whom he could forward issues with only "please handle".
I made the mistake of immediately clarifying that, in many cases, I "handled" those issues by ignoring.</a>

While most 4700 terminals used the amazingly lame B-loop inherited from 3600,
one terminal used 3700 coax for dedicated, relatively high speed communication.
My main technical contributions were obtaining a box (from IBM UK) for 3270 testing,
based on <a href="https://en.wikipedia.org/wiki/Signetics_8X300">Signetics 8X305 microcontroller</a>,
then developing a simple language and compiler for that, which the display developer also used,
since that terminal also used an 8X305.
<a name=3>
My main <i>perceived</i> contribution was taking over problem review meetings,
where the development manager had previously stone-walled many issues,
exploiting this department's lack of confidence and competence.
My abrasiveness would not have worked, except that IBM Charlotte's senior managers were,
at that time, still of the old school which encouraged contention and backed me up.
As testing wrapped up, the assurance lab manager came to my office one evening to confirm
whether I considered ready to announce.

Within a year, every other member of that department had been promoted to management.</a>
<a name=4>
Bernie, a senior engineer, came into the lab one day and confided that I should remain there,
waiting for some division VIP.  Instead, I freaked and disappeared as soon as Bernie left...</a>
<a name=5>
A new lab manager arrived from IBM Raleigh, and quickly transferred a couple of his old cohorts.
For no obvious reason (perhaps because we both were NASCAR fans?), he took a liking to me,
and we all went with his wife (an IBM secretary) in his large RV to nearby NASCAR races,
where I stayed busy repairing various broken RV accessories.</a>
</pre>
<li>watch this space
<br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp
<br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp
<br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp
<br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp
<br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp
<br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp
<br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp
<br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp <br> &nbsp
</body>
