<html><head>
<style> body { margin-left: 80px; } ul {margin-top:0; } dl {margin-top:0; } dt { margin-left:15; } h4 {margin-bottom:0; } pre {margin-top:0;) </style>
<title>TinyUSB for composite USB using Arduino and ESP32-S2-Saola-1</title></head>
<body>
<font size=-1>
<a href="index.htm"><i>back to Arduino and ESP32-S2-Saola-1</i></a><br>
</font> <font size=+1>

<h4><a href="https://docs.tinyusb.org/en/latest/reference/getting_started.html">Add TinyUSB to your project</a></h4>  

<h4><a href="https://github.com/hathach/tinyusb">TinyUSB</a> Geneology</h4>
Adafruit ported <a href="https://blog.adafruit.com/2020/04/10/tinyusb-esp32-s2-support-merged-and-a-live-stream-in-4-hours-about-it">TinyUSB to ESP32-S2</a>
for <a href="https://www.adafruit.com/product/4775">Metro</a> and <a href="https://www.adafruit.com/product/4769">FeatherS2</a> products,<br>
mostly with CircuitPython but also <a href="https://learn.adafruit.com/adafruit-metro-esp32-s2/arduino-ide-setup-2">the Arduino IDE</a>.<br>

<dl>
<dt>Adafruit TinyUSB support:
<dd><a href="https://www.arduino.cc/reference/en/libraries/adafruit-tinyusb-library/">Adafruit TinyUSB Library</a>
<dt>GitHub releases
<dd>adafruit has <a href="https://github.com/adafruit/Adafruit_TinyUSB_Arduino">https://github.com/adafruit/Adafruit_TinyUSB_Arduino</a> and
    <a href="https://github.com/adafruit/tinyuf2">TinyUF2 Bootloader</a>
<br> &nbsp Their ESP32 port depends on <a href="https://github.com/espressif/arduino-esp32/blob/master/cores/esp32/esp32-hal-tinyusb.c">Espressif's esp32-hal-tinyusb.c</a> for building USB descriptors.
<br>adafruit also has <a href="https://learn.adafruit.com/using-webusb-with-arduino-and-tinyusb">a WebUSB guide</a>
</dl>
<h4>ESP32TinyUSB</h4>
This appears to be Expressif's "official" USB library implementation
<ul>
<li><a href="https://www.arduino.cc/reference/en/libraries/esp32tinyusb">ESP32TinyUSB Arduino link</a>
<li>ESP32TinyUSB is the <a href="https://github.com/chegewara/EspTinyUSB">chegewara / EspTinyUSB implementation</a> with seemingly useful example sketches..
<br>It includes <a href="https://github.com/chegewara/EspTinyUSB/tree/master/examples/device">device examples updated to work with esp32s2</a>
<li><a href="https://www.arduino.cc/reference/en/libraries/esp32tinyusb/">Arduino ESP32TinyUSB</a> library reference (<i>points back to GitHub</i>).
<br>Builds disabling e.g. MSC filesystem support <a href="https://github.com/chegewara/EspTinyUSB/issues/61">require source code hacking...</a>
<li><a href="https://esp32.com/viewtopic.php?f=12&t=23798&p=85401&hilit=midi#p85401">ESP32-S2 TinyUSB composite reconfiguration</a>
<li><a href="https://github.com/chegewara/EspTinyUSB/issues/52">limited endpoints</a><ul>
<li>ESP32-S2 provides 6 endpoint pairs, not counting pair 0.<br>
  Only 5 IN endpoints can be active at a time, so usually just 5 pairs available.
<li>Device endpoint requirements for each instance:<ul>
<li>Endpoint pair 0 is always reserved for USB setup and control
<li>MIDI: 1 IN/OUT pair
<li>CDC: 1 IN/OUT pair for data + 1 IN endpoint for control
<li>HID: 1 IN/OUT pair
</ul>
<li>MIDI was broken by <a href="https://github.com/chegewara/EspTinyUSB/blob/master/src/device/midi/midiusb.cpp"><code>midiusb.cpp:#define EPNUM_MIDI 0x05</code></a>; <b>fix by changing</b> to <code>0x04</code>
<li>current assignments:<pre>grep -R EPNUM_ libraries | grep 0x | grep define
libraries/ESP32TinyUSB/src/device/cdc/cdcusb.cpp:#define EPNUM_CDC   0x02
libraries/ESP32TinyUSB/src/device/hid/hidcomposite.cpp:#define EPNUM_HID 0x03
libraries/ESP32TinyUSB/src/device/hid/hidgamepad.cpp:#define EPNUM_HID   0x03
libraries/ESP32TinyUSB/src/device/hid/hidgeneric.cpp:#define EPNUM_HID   0x03
libraries/ESP32TinyUSB/src/device/hid/hidkeyboard.cpp:#define EPNUM_HID 0x02
libraries/ESP32TinyUSB/src/device/hid/hidmouse.cpp:#define EPNUM_HID 0x03
libraries/ESP32TinyUSB/src/device/hid/hidusb.cpp:#define EPNUM_HID   0x03
libraries/ESP32TinyUSB/src/device/midi/midiusb.cpp:#define EPNUM_MIDI 0x04
libraries/ESP32TinyUSB/src/device/msc/mscusb.cpp:#define EPNUM_MSC 0x04
libraries/ESP32TinyUSB/src/webusb.h:#define EPNUM_VENDOR 0x04
</pre>
<li>This should allow CDC (1 &amp 2), gamepad (3) and MIDI (4) to play together..
<li>EspTinyUSB configuration (including serial number) is discussed
 <a href="https://github.com/chegewara/EspTinyUSB/blob/f9ab4843b1bbd70e53bb6bb40651046138beee6c/README.md">here</a>
<li>If more than one ESP32-S2 module will be connected to a single USB host (e.g., Windows PC),<br>
  <a href="https://github.com/chegewara/EspTinyUSB/blob/master/examples/device/basic_setup/basic_setup.ino"><i>different serial numbers should be set</i></a>
</ul>
</ul>

<h4><a href="midi.htm">TinyUSB MIDI</a></h4>

<h4><a href="https://www.hackster.io/news/create-custom-usb-devices-with-the-esp32s2stick-458bf370a522">Create Custom USB Devices with the esp32s2Stick</a></h4>

<h4><a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32s2/api-reference/peripherals/usb_device.html">ESP32-S2 Hardware USB connection</a></h4>
<a href="install.htm#USB_cable">USB cable preparation</a><br>
<img width=640 src="https://docs.espressif.com/projects/esp-idf/en/latest/esp32s2/_images/usb-board-connection.png"><br clear=all>
<font color="red"><b>USB GND should be connected to ESP32-S2 Board GND</b></font><br>
USB signalling is differential, but <i>signal voltages are still relative to device ground</i>.<br>
<img width=640 src="https://miro.medium.com/max/1300/1*S0ej_0Um4uLzUK4VDwy3LQ.jpeg"><br clear=all>

<h4>USB CDC device</h4><ul>
<li>Provided <a href="https://github.com/blekenbleu/otherESP32S2examples/tree/main/cdc"><code>cdc.ino</code> sketch</a> loaded and ran fine, after re-enabling MSC and DFU devices...<br>
<img src="ready.jpg"></ul>

<h4>USB HID device</h4><ul>
<li>Provided <a href="https://github.com/blekenbleu/otherESP32S2examples/tree/main/gamepad"><code>gamepad.ino</code> sketch</a> loaded and ran,
<li><code>joy.cpl</code> detected <code>ESP32S2 arduino device</code>, but Test showed no activity...<ul>
<li>Serial message were added to the sketch;<br> <code>if(!digitalRead(0))</code> was never true while using <code>joy.cpl</code>...
<li>Another <a href="https://github.com/espressif/arduino-esp32/blob/master/libraries/USB/examples/Gamepad/Gamepad.ino"><code>Gamepad.ino</code></a> had no such test.
<li><b>ESP32S2 arduino devices > Properties > Test</b><br> got busy after rebuilding with that test defeated.
<li>Meanwhile, there was also a LOT of serial traffic from <code>Hidusb.cpp</code>:<pre>...
...
[ 74914][D][hidusb.cpp:37] write(): len: 11
[ 75013][D][hidusb.cpp:36] write(): write hid: 
[ 75014][D][hidusb.cpp:37] write(): len: 11
[ 75113][D][hidusb.cpp:36] write(): write hid: 
[ 75114][D][hidusb.cpp:37] write(): len: 11
...</pre>
<li>Commenting out 2 logging lines in <code>hidusb.cpp</code> stiffled that traffic.</ul>
<li><b>Note:</b> &nbsp Windows' <b>Game Controllers</b> &gt Test only updates while it has focus.</ul>

<h4>USB MIDI device</h4><ul> 
<li>using <a href="https://hautetechnique.com/midi/midiview/">Midi View</a> to look for <a href="https://github.com/chegewara/EspTinyUSB/releases/tag/2.0.0">EspTinyUSB-2.0.0</a> MIDI traffic
<li><a href="">midi-test</a> loaded and ran, but no MIDI device was detected
<li><a href="https://github.com/chegewara/EspTinyUSB/tree/master/examples/device/midi">midi.ino</a> loaded and ran;
 <b>MIDI CLASS</b> was detected, but with no traffic, despite serial monitor output:<pre>ESP-ROM:esp32s2-rc4-20191025
Build:Oct 25 2019
rst:0x1 (POWERON),boot:0x8 (SPI_FAST_FLASH_BOOT)
SPIWP:0xee
mode:DIO, clock div:2
load:0x3ffe6100,len:0x570
load:0x4004c000,len:0xa50
load:0x40050000,len:0x28d8
entry 0x4004c18c
[   580][D][usb_descriptors.cpp:45] getConfigurationDescriptor(): descriptor length: 101

[   581][D][esptinyusb.cpp:48] esptinyusbtask(): USB tud_task created
[  1582][V][midiusb.cpp:88] setSong(): MThd format => 0

MTrk
[  1583][V][midiusb.cpp:103] setSong(): song => 40, i = 40

invoking midi.playSong()
[  1593][V][midiusb.cpp:145] playSong(): play
[  1594][V][midiusb.cpp:151] playSong(): delta => 40, _byte = 90

[  2106][V][midiusb.cpp:28] noteON(): ON: 65

[  2107][V][midiusb.cpp:181] playSong(): on
[  2107][V][midiusb.cpp:151] playSong(): delta => 0, _byte = 90

[  2109][V][midiusb.cpp:28] noteON(): ON: 60

[  2113][V][midiusb.cpp:181] playSong(): on
[  2117][V][midiusb.cpp:151] playSong(): delta => 0, _byte = 90
...</pre><ul>
<li>commented out <code>log_v</code>'s in <a href="https://github.com/chegewara/EspTinyUSB/blob/master/src/device/midi/midiusb.cpp">midiusb.cpp</a>:<pre>ESP-ROM:esp32s2-rc4-20191025
Build:Oct 25 2019
rst:0x1 (POWERON),boot:0x8 (SPI_FAST_FLASH_BOOT)
SPIWP:0xee
mode:DIO, clock div:2
load:0x3ffe6100,len:0x570
load:0x4004c000,len:0xa50
load:0x40050000,len:0x28d8
entry 0x4004c18c
[   558][D][usb_descriptors.cpp:45] getConfigurationDescriptor(): descriptor length: 101

[   558][D][esptinyusb.cpp:48] esptinyusbtask(): USB tud_task created
[  1560][V][midiusb.cpp:88] setSong(): MThd format => 0
[  1561][V][midiusb.cpp:95] setSong(): MTrk
[  1561][V][midiusb.cpp:103] setSong(): song => 40, i = 40
invoking midi.playSong()
[  1574][V][midiusb.cpp:145] playSong(): play
[ 94030][V][midiusb.cpp:135] parseMeta(): meta => 2f, n = 2
[ 94031][V][midiusb.cpp:191] playSong(): unknown note: x0
[ 94526][V][midiusb.cpp:191] playSong(): unknown note: x30
[ 95334][V][midiusb.cpp:191] playSong(): unknown note: x0
[ 97702][V][midiusb.cpp:171] playSong(): ctrl x0 x0
[ 97870][V][midiusb.cpp:191] playSong(): unknown note: x14
[ 99886][V][midiusb.cpp:191] playSong(): unknown note: x3f
[101926][V][midiusb.cpp:135] parseMeta(): meta => 3f, n = ffffffff</pre>

</ul>
</ul>

<h4>GitHub:</h4>
<ul compact>
<li><a href="https://github.com/adafruit/Adafruit_TinyUSB_Arduino">AdafruitTinyUSB Library for Arduino</a>
<li><a href="https://github.com/Open-ESP/tinyusb-arduino/blob/master/changelog.md">Open-ESP TinyUSB</a>
</ul>

<iframe width="640" height="480" src="https://www.youtube.com/embed/XnqDEV21BSA"></iframe><br><hr>
<iframe width="640" height="480" src="https://www.youtube.com/embed/l3MmrVHMd94"></iframe><br>

</font></body></html>
